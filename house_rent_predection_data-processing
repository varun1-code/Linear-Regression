import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
import plotly.express as px
from sklearn.model_selection import KFold, train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score
from sklearn.linear_model import LinearRegression
from math import sqrt
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant
house=pd.read_csv("House_Rent_Dataset.csv")
house.head()
house.tail()
house.info()
house.select_dtypes(include='object').nunique().sort_values(ascending=False)
target_cols=['City','Point of Contact','Area Locality','Furnishing Status','Tenant Preferred']
counts=[]
for col in target_cols:
    vc=house[col].value_counts()
    table=pd.DataFrame({
    'column':col,
    'value':vc.index,
    'count':vc.values})
    counts.append(table)
summary_df=pd.concat(counts,ignore_index=True)
summary_df
ds=house[(house['Area Type']!='Built Area')&(house['Point of Contact']!='Contact Builder')]
ds[['Rent','City']].groupby('City').describe()
print(ds.sort_values(by="Rent",ascending=False).head())
import warnings
import matplotlib.pyplot as plt
import seaborn as sns

warnings.filterwarnings("ignore", category=FutureWarning)

plt.figure(figsize=(10, 5))
sns.boxplot(x='City', y='Rent', data=ds, showfliers=False, palette='Set2')

plt.xticks(rotation=45, fontsize=10)
plt.title('Monthly Rent Distribution by City', fontsize=14, weight='bold')
plt.ylabel('Monthly Rent', fontsize=12)
plt.xlabel('')

sns.despine()
plt.tight_layout()
plt.show()
ds['Rent'].sort_values().tail(10)

ds = ds.drop(index=1837)
upper_limit = ds['Rent'].quantile(0.99)
ds = ds[ds['Rent'] <= upper_limit]
ds = ds.reset_index(drop=True)
ds['Rent'].sort_values().tail(10)
warnings.filterwarnings("ignore")
sns.pairplot(ds[['BHK','Rent','Size','Floor','Furnishing Status','Bathroom','City']],hue='City',kind='reg',palette='Set2')
plt.show()
ds=ds.drop(columns=['Posted On','Area Locality','Tenant Preferred'])
ds['Furnishing Status']=ds['Furnishing Status'].replace({'Unfurnished':0,'Semi-Furnished':0.5,'Furnished':1})
